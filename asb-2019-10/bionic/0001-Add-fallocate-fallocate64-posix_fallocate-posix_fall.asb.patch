From b351ec422dd055a372052a8b152a300ad06b3b34 Mon Sep 17 00:00:00 2001
From: Elliott Hughes <enh@google.com>
Date: Mon, 3 Feb 2014 16:20:46 -0800
Subject: [PATCH] Add fallocate/fallocate64/posix_fallocate/posix_fallocate64.

[port to 11.0:
 - Integrated changes to legacy_32_bit_support.cpp (the fallocate alias)
   directly into posix_fallocate.cpp (and guard them with `!__LP64__`)
 - Returned to old syscall headers
 - Add cfi_startproc/cfi_endproc to the functions manually ]

Bug: 5287571
Bug: 12612860
Change-Id: I4501b9c6cdf9a830336ce0b3afc4ea716b6a0f6f
---
 libc/Android.mk                       |  1 +
 libc/SYSCALLS.TXT                     |  4 +++
 libc/arch-arm/syscalls.mk             |  1 +
 libc/arch-arm/syscalls/fallocate64.S  | 25 ++++++++++++++
 libc/arch-mips/syscalls.mk            |  1 +
 libc/arch-mips/syscalls/fallocate64.S | 23 +++++++++++++
 libc/arch-x86/syscalls.mk             |  1 +
 libc/arch-x86/syscalls/fallocate64.S  | 45 +++++++++++++++++++++++++
 libc/bionic/posix_fallocate.cpp       | 48 +++++++++++++++++++++++++++
 libc/include/fcntl.h                  |  4 +++
 10 files changed, 153 insertions(+)
 create mode 100644 libc/arch-arm/syscalls/fallocate64.S
 create mode 100644 libc/arch-mips/syscalls/fallocate64.S
 create mode 100644 libc/arch-x86/syscalls/fallocate64.S
 create mode 100644 libc/bionic/posix_fallocate.cpp

diff --git a/libc/Android.mk b/libc/Android.mk
index f4faa509..01e1c5e9 100644
--- a/libc/Android.mk
+++ b/libc/Android.mk
@@ -215,6 +215,7 @@ libc_bionic_src_files := \
     bionic/libc_logging.cpp \
     bionic/libgen.cpp \
     bionic/mmap.cpp \
+    bionic/posix_fallocate.cpp \
     bionic/pthread_attr.cpp \
     bionic/pthread_detach.cpp \
     bionic/pthread_equal.cpp \
diff --git a/libc/SYSCALLS.TXT b/libc/SYSCALLS.TXT
index 88c980f6..25e4ac1d 100644
--- a/libc/SYSCALLS.TXT
+++ b/libc/SYSCALLS.TXT
@@ -164,6 +164,10 @@ ssize_t     fgetxattr(int, const char *, void *, size_t) 1
 ssize_t     flistxattr(int, char *, size_t) 1
 int         fremovexattr(int, const char *) 1
 
+# (fallocate only gets two lines because there is no 32-bit variant.)
+int fallocate64:fallocate(int, int, off64_t, off64_t) arm,mips,x86
+int fallocate|fallocate64(int, int, off_t, off_t) arm64,x86_64
+
 # file system
 int     link (const char*, const char*)  1
 int     unlink (const char*)             1
diff --git a/libc/arch-arm/syscalls.mk b/libc/arch-arm/syscalls.mk
index 252a428c..3d07fbff 100644
--- a/libc/arch-arm/syscalls.mk
+++ b/libc/arch-arm/syscalls.mk
@@ -67,6 +67,7 @@ syscall_src += arch-arm/syscalls/__ioctl.S
 syscall_src += arch-arm/syscalls/readv.S
 syscall_src += arch-arm/syscalls/writev.S
 syscall_src += arch-arm/syscalls/__fcntl.S
+syscall_src += arch-arm/syscalls/fallocate64.S
 syscall_src += arch-arm/syscalls/flock.S
 syscall_src += arch-arm/syscalls/fchmod.S
 syscall_src += arch-arm/syscalls/dup.S
diff --git a/libc/arch-arm/syscalls/fallocate64.S b/libc/arch-arm/syscalls/fallocate64.S
new file mode 100644
index 00000000..3c00faa2
--- /dev/null
+++ b/libc/arch-arm/syscalls/fallocate64.S
@@ -0,0 +1,25 @@
+/* Generated by gensyscalls.py. Do not edit. */
+#include <asm/unistd.h>
+#include <linux/err.h>
+#include <machine/asm.h>
+
+ENTRY(fallocate64)
+    .cfi_startproc
+    mov     ip, sp
+    stmfd   sp!, {r4, r5, r6, r7}
+    .cfi_def_cfa_offset 16
+    .cfi_rel_offset r4, 0
+    .cfi_rel_offset r5, 4
+    .cfi_rel_offset r6, 8
+    .cfi_rel_offset r7, 12
+    ldmfd   ip, {r4, r5, r6}
+    ldr     r7, =__NR_fallocate
+    swi     #0
+    ldmfd   sp!, {r4, r5, r6, r7}
+    .cfi_def_cfa_offset 0
+    cmn     r0, #(MAX_ERRNO + 1)
+    bxls    lr
+    neg     r0, r0
+    b       __set_errno
+    .cfi_endproc
+END(fallocate64)
diff --git a/libc/arch-mips/syscalls.mk b/libc/arch-mips/syscalls.mk
index 23393a24..cb30e989 100644
--- a/libc/arch-mips/syscalls.mk
+++ b/libc/arch-mips/syscalls.mk
@@ -71,6 +71,7 @@ syscall_src += arch-mips/syscalls/__ioctl.S
 syscall_src += arch-mips/syscalls/readv.S
 syscall_src += arch-mips/syscalls/writev.S
 syscall_src += arch-mips/syscalls/__fcntl.S
+syscall_src += arch-mips/syscalls/fallocate64.S
 syscall_src += arch-mips/syscalls/flock.S
 syscall_src += arch-mips/syscalls/fchmod.S
 syscall_src += arch-mips/syscalls/dup.S
diff --git a/libc/arch-mips/syscalls/fallocate64.S b/libc/arch-mips/syscalls/fallocate64.S
new file mode 100644
index 00000000..e844d169
--- /dev/null
+++ b/libc/arch-mips/syscalls/fallocate64.S
@@ -0,0 +1,23 @@
+/* Generated by gensyscalls.py. Do not edit. */
+
+#include <asm/unistd.h>
+    .text
+    .globl fallocate64
+    .align 4
+    .ent fallocate64
+
+fallocate64:
+    .set noreorder
+    .cpload $t9
+    li $v0, __NR_fallocate
+    syscall
+    bnez $a3, 1f
+    move $a0, $v0
+    j $ra
+    nop
+1:
+    la $t9,__set_errno
+    j $t9
+    nop
+    .set reorder
+    .end fallocate64
diff --git a/libc/arch-x86/syscalls.mk b/libc/arch-x86/syscalls.mk
index 11573de6..f9947b73 100644
--- a/libc/arch-x86/syscalls.mk
+++ b/libc/arch-x86/syscalls.mk
@@ -71,6 +71,7 @@ syscall_src += arch-x86/syscalls/__ioctl.S
 syscall_src += arch-x86/syscalls/readv.S
 syscall_src += arch-x86/syscalls/writev.S
 syscall_src += arch-x86/syscalls/__fcntl.S
+syscall_src += arch-x86/syscalls/fallocate64.S
 syscall_src += arch-x86/syscalls/flock.S
 syscall_src += arch-x86/syscalls/fchmod.S
 syscall_src += arch-x86/syscalls/dup.S
diff --git a/libc/arch-x86/syscalls/fallocate64.S b/libc/arch-x86/syscalls/fallocate64.S
new file mode 100644
index 00000000..b6311198
--- /dev/null
+++ b/libc/arch-x86/syscalls/fallocate64.S
@@ -0,0 +1,45 @@
+/* Generated by gensyscalls.py. Do not edit. */
+#include <asm/unistd.h>
+#include <linux/err.h>
+#include <machine/asm.h>
+
+ENTRY(fallocate64)
+    .cfi_startproc
+    pushl   %ebx
+    pushl   %ecx
+    pushl   %edx
+    pushl   %esi
+    pushl   %edi
+    pushl   %ebp
+    .cfi_def_cfa_offset 24
+    .cfi_rel_offset ebx, 0
+    .cfi_rel_offset ecx, 4
+    .cfi_rel_offset edx, 8
+    .cfi_rel_offset esi, 12
+    .cfi_rel_offset edi, 16
+    .cfi_rel_offset ebp, 20
+    mov     28(%esp), %ebx
+    mov     32(%esp), %ecx
+    mov     36(%esp), %edx
+    mov     40(%esp), %esi
+    mov     44(%esp), %edi
+    mov     48(%esp), %ebp
+    movl    $__NR_fallocate, %eax
+    int     $0x80
+    cmpl    $-MAX_ERRNO, %eax
+    jb      1f
+    negl    %eax
+    pushl   %eax
+    call    __set_errno
+    addl    $4, %esp
+    orl     $-1, %eax
+1:
+    popl    %ebp
+    popl    %edi
+    popl    %esi
+    popl    %edx
+    popl    %ecx
+    popl    %ebx
+    ret
+    .cfi_endproc
+END(fallocate64)
diff --git a/libc/bionic/posix_fallocate.cpp b/libc/bionic/posix_fallocate.cpp
new file mode 100644
index 00000000..71b4df6a
--- /dev/null
+++ b/libc/bionic/posix_fallocate.cpp
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <fcntl.h>
+
+#include "private/ErrnoRestorer.h"
+
+#if !__LP64__
+// There is no fallocate for 32-bit off_t, so we need to widen and call fallocate64.
+int fallocate(int fd, int mode, off_t offset, off_t length) {
+  return fallocate64(fd, mode, static_cast<off64_t>(offset), static_cast<off64_t>(length));
+}
+#endif
+
+int posix_fallocate(int fd, off_t offset, off_t length) {
+  ErrnoRestorer errno_restorer;
+  return (fallocate(fd, 0, offset, length) == 0) ? 0 : errno;
+}
+
+int posix_fallocate64(int fd, off64_t offset, off64_t length) {
+  ErrnoRestorer errno_restorer;
+  return (fallocate64(fd, 0, offset, length) == 0) ? 0 : errno;
+}
diff --git a/libc/include/fcntl.h b/libc/include/fcntl.h
index 3cb3d8ab..67f151af 100644
--- a/libc/include/fcntl.h
+++ b/libc/include/fcntl.h
@@ -43,8 +43,12 @@ __BEGIN_DECLS
 #define O_CLOEXEC  02000000
 #endif
 
+extern int  fallocate64(int, int, off64_t, off64_t);
+extern int  fallocate(int, int, off_t, off_t);
 extern int  open(const char*  path, int  mode, ...);
 extern int  openat(int fd, const char*  path, int  mode, ...);
+extern int  posix_fallocate64(int, off64_t, off64_t);
+extern int  posix_fallocate(int, off_t, off_t);
 extern int  unlinkat(int dirfd, const char *pathname, int flags);
 extern int  fcntl(int   fd, int   command, ...);
 extern int  creat(const char*  path, mode_t  mode);
-- 
2.17.1

