From c71db51866302164b6ef48879e4a2ead17163943 Mon Sep 17 00:00:00 2001
From: Smriti Gupta <smritig@codeaurora.org>
Date: Tue, 21 May 2013 14:40:32 +0530
Subject: [PATCH 4/6] Bluetooth: OPP Update progress in worker thread

OPP throughput was seen very less because of the progress update
from BT Read/Write path. Moved it to worker thread.

Change-Id: I884356dc8b42a7f7eca1b8581e3118d5ec2ce9e2
(cherry picked from commit a81f3906a955e7188df116b189a83ea2182a1119)
(cherry picked from commit a54f9274290a89c832a5aecf891d272c220c483f)
(cherry picked from commit c507eaa18533c81788811c4485e3ea8dbe62e7a1)
---
 .../opp/BluetoothOppObexClientSession.java         | 78 ++++++++++++++++++-
 .../opp/BluetoothOppObexServerSession.java         | 90 +++++++++++++++++++++-
 2 files changed, 161 insertions(+), 7 deletions(-)

diff --git a/src/com/android/bluetooth/opp/BluetoothOppObexClientSession.java b/src/com/android/bluetooth/opp/BluetoothOppObexClientSession.java
index d3eb881..d5ffe23 100644
--- a/src/com/android/bluetooth/opp/BluetoothOppObexClientSession.java
+++ b/src/com/android/bluetooth/opp/BluetoothOppObexClientSession.java
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  * Copyright (c) 2008-2009, Motorola, Inc.
  *
  * All rights reserved.
@@ -119,6 +120,45 @@ public class BluetoothOppObexClientSession implements BluetoothOppObexSession {
         }
         return done;
     }
+    private class ContentResolverUpdateThread extends Thread {
+
+        private static final int sSleepTime = 500;
+        private Uri contentUri;
+        private Context mContext1;
+        private int position;
+
+        public ContentResolverUpdateThread(Context context, Uri cntUri, int pos) {
+            super("BtOpp ContentResolverUpdateThread");
+            mContext1 = context;
+            contentUri = cntUri;
+            position = pos;
+        }
+
+        public void updateProgress (int pos) {
+            position = pos;
+        }
+
+        @Override
+        public void run() {
+            ContentValues updateValues;
+
+            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
+
+            while (true) {
+                updateValues = new ContentValues();
+                updateValues.put(BluetoothShare.CURRENT_BYTES, position);
+                mContext1.getContentResolver().update(contentUri, updateValues,
+                        null, null);
+
+                try {
+                    Thread.sleep(sSleepTime);
+                } catch (InterruptedException e1) {
+                    if (V) Log.v(TAG, "ContentResolverUpdateThread was interrupted (1), exiting");
+                    return;
+                }
+            }
+        }
+    }
 
     private class ClientThread extends Thread {
 
@@ -340,6 +380,9 @@ public class BluetoothOppObexClientSession implements BluetoothOppObexSession {
             int status = BluetoothShare.STATUS_SUCCESS;
             Uri contentUri = Uri.parse(BluetoothShare.CONTENT_URI + "/" + mInfo.mId);
             ContentValues updateValues;
+            ContentResolverUpdateThread uiUpdateThread = null;
+            HeaderSet reply;
+            reply = new HeaderSet();
             HeaderSet request;
             request = new HeaderSet();
             request.setHeader(HeaderSet.NAME, fileInfo.mFileName);
@@ -465,14 +508,34 @@ public class BluetoothOppObexClientSession implements BluetoothOppObexSession {
                                             + " readLength " + readLength + " bytes took "
                                             + (System.currentTimeMillis() - timestamp) + " ms");
                                 }
-                                updateValues = new ContentValues();
-                                updateValues.put(BluetoothShare.CURRENT_BYTES, position);
-                                mContext1.getContentResolver().update(contentUri, updateValues,
-                                        null, null);
+
+                                if (uiUpdateThread == null) {
+                                    uiUpdateThread = new ContentResolverUpdateThread (mContext1,
+                                                                    contentUri, position);
+                                    uiUpdateThread.start ( );
+                                } else {
+                                    uiUpdateThread.updateProgress (position);
+                                }
+
                             }
                         }
                     }
 
+                    if (uiUpdateThread != null) {
+                        try {
+                            uiUpdateThread.interrupt ();
+                            uiUpdateThread.join ();
+                            uiUpdateThread = null;
+
+                            updateValues = new ContentValues();
+                            updateValues.put(BluetoothShare.CURRENT_BYTES, position);
+                            mContext1.getContentResolver().update(contentUri, updateValues,
+                                        null, null);
+                        } catch (InterruptedException ie) {
+                            if (V) Log.v(TAG, "Interrupted waiting for uiUpdateThread to join");
+                        }
+                    }
+
                     if (responseCode == ResponseCodes.OBEX_HTTP_FORBIDDEN
                             || responseCode == ResponseCodes.OBEX_HTTP_NOT_ACCEPTABLE) {
                         Log.i(TAG, "Remote reject file " + fileInfo.mFileName + " length "
@@ -504,6 +567,13 @@ public class BluetoothOppObexClientSession implements BluetoothOppObexSession {
                 try {
                     // Close InputStream and remove SendFileInfo from map
                     BluetoothOppUtility.closeSendFileInfo(mInfo.mUri);
+
+                    if (uiUpdateThread != null) {
+                        uiUpdateThread.interrupt ();
+                        uiUpdateThread = null;
+                    }
+
+                    fileInfo.mInputStream.close();
                     if (!error) {
                         responseCode = putOperation.getResponseCode();
                         if (responseCode != -1) {
diff --git a/src/com/android/bluetooth/opp/BluetoothOppObexServerSession.java b/src/com/android/bluetooth/opp/BluetoothOppObexServerSession.java
index 5bd54af..6c29f42 100644
--- a/src/com/android/bluetooth/opp/BluetoothOppObexServerSession.java
+++ b/src/com/android/bluetooth/opp/BluetoothOppObexServerSession.java
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  * Copyright (c) 2008-2009, Motorola, Inc.
  *
  * All rights reserved.
@@ -46,9 +47,19 @@ import android.os.Handler;
 import android.os.Message;
 import android.os.PowerManager;
 import android.os.PowerManager.WakeLock;
+import android.os.Process;
 import android.util.Log;
 import android.webkit.MimeTypeMap;
 
+import android.os.SystemProperties;
+import android.database.Cursor;
+import android.provider.ContactsContract.Contacts;
+import android.provider.ContactsContract.Profile;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.lang.Thread;
+
+
 import javax.obex.HeaderSet;
 import javax.obex.ObexTransport;
 import javax.obex.Operation;
@@ -157,6 +168,46 @@ public class BluetoothOppObexServerSession extends ServerRequestHandler implemen
         mSession = null;
     }
 
+    private class ContentResolverUpdateThread extends Thread {
+
+        private static final int sSleepTime = 500;
+        private Uri contentUri;
+        private Context mContext1;
+        private int position;
+
+        public ContentResolverUpdateThread(Context context, Uri cntUri, int pos) {
+            super("BtOpp Server ContentResolverUpdateThread");
+            mContext1 = context;
+            contentUri = cntUri;
+            position = pos;
+        }
+
+        public void updateProgress (int pos) {
+            position = pos;
+        }
+
+        @Override
+        public void run() {
+            ContentValues updateValues;
+
+            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
+
+            while (true) {
+                updateValues = new ContentValues();
+                updateValues.put(BluetoothShare.CURRENT_BYTES, position);
+                mContext1.getContentResolver().update(contentUri, updateValues,
+                        null, null);
+
+                try {
+                    Thread.sleep(sSleepTime);
+                } catch (InterruptedException e1) {
+                    if (V) Log.v(TAG, "Server ContentResolverUpdateThread was interrupted (1), exiting");
+                    return;
+                }
+            }
+        }
+    }
+
     public void addShare(BluetoothOppShareInfo info) {
         if (D) Log.d(TAG, "addShare for id " + info.mId);
         mInfo = info;
@@ -431,6 +482,7 @@ public class BluetoothOppObexServerSession extends ServerRequestHandler implemen
          */
         int status = -1;
         BufferedOutputStream bos = null;
+        ContentResolverUpdateThread uiUpdateThread = null;
 
         InputStream is = null;
         boolean error = false;
@@ -481,9 +533,33 @@ public class BluetoothOppObexServerSession extends ServerRequestHandler implemen
                                 + (System.currentTimeMillis() - timestamp) + " ms");
                     }
 
-                    ContentValues updateValues = new ContentValues();
-                    updateValues.put(BluetoothShare.CURRENT_BYTES, position);
-                    mContext.getContentResolver().update(contentUri, updateValues, null, null);
+                    if (uiUpdateThread == null) {
+                        uiUpdateThread = new ContentResolverUpdateThread (mContext, contentUri, position);
+                        if (V) {
+                            Log.v(TAG, "Worker for Updation : Created");
+                        }
+                        uiUpdateThread.start();
+                    } else {
+                        uiUpdateThread.updateProgress (position);
+                    }
+                }
+
+                if (uiUpdateThread != null) {
+                    try {
+                        if (V) {
+                            Log.v(TAG, "Worker for Updation : Destroying");
+                        }
+                        uiUpdateThread.interrupt ();
+                        uiUpdateThread.join ();
+                        uiUpdateThread = null;
+
+                        ContentValues updateValues = new ContentValues();
+                        updateValues.put(BluetoothShare.CURRENT_BYTES, position);
+                        mContext.getContentResolver().update(contentUri, updateValues,
+                                        null, null);
+                    } catch (InterruptedException ie) {
+                            if (V) Log.v(TAG, "Interrupted waiting for uiUpdateThread to join");
+                    }
                 }
             } catch (IOException e1) {
                 Log.e(TAG, "Error when receiving file");
@@ -494,6 +570,14 @@ public class BluetoothOppObexServerSession extends ServerRequestHandler implemen
                     status = BluetoothShare.STATUS_OBEX_DATA_ERROR;
                 }
                 error = true;
+            } finally {
+                if (uiUpdateThread != null) {
+                    if (V) {
+                        Log.v(TAG, "Worker for Updation : Finally Destroying");
+                    }
+                    uiUpdateThread.interrupt ();
+                    uiUpdateThread = null;
+                }
             }
         }
 
-- 
2.7.4

