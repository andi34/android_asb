From 3ef91e362d62ff3cfad06114463fee9b765a1ef4 Mon Sep 17 00:00:00 2001
From: Ted Wang <tedwang@google.com>
Date: Tue, 26 Nov 2019 11:46:38 +0800
Subject: [PATCH 2/3] Fix potential OOB write in
 btm_read_remote_ext_features_complete

Add event length check to avoid hci event sent from controller not
correct.
Add page number check to avoid page number is bigger than
HCI_EXT_FEATURES_PAGE_MAX.

Bug: 141552859
Bug: 144205318
Test: inject function
Merged-In: Iaca4db4ee9bf27362f62aba0da088727e98955d1
Change-Id: Iaca4db4ee9bf27362f62aba0da088727e98955d1
(cherry picked from commit 140d8297ace9cd54a903a9cd3a079fd805030f1e)
---
 stack/btm/btm_acl.c     | 24 ++++++++++++++++++++++--
 stack/btm/btm_int.h     |  2 +-
 stack/btu/btu_hcif.c    | 10 ++++++----
 stack/include/hcidefs.h |  2 ++
 4 files changed, 31 insertions(+), 7 deletions(-)

diff --git a/stack/btm/btm_acl.c b/stack/btm/btm_acl.c
index 4819012b8..3e212fc4d 100644
--- a/stack/btm/btm_acl.c
+++ b/stack/btm/btm_acl.c
@@ -47,7 +47,7 @@
 #include "l2c_int.h"
 #include "hcidefs.h"
 #include "bt_utils.h"
-
+#include "log/log.h"
 
 extern fixed_queue_t *btu_general_alarm_queue;
 
@@ -1153,7 +1153,7 @@ void btm_read_remote_features_complete (UINT8 *p)
 ** Returns          void
 **
 *******************************************************************************/
-void btm_read_remote_ext_features_complete (UINT8 *p)
+void btm_read_remote_ext_features_complete (UINT8 *p, UINT8 evt_len)
 {
     tACL_CONN   *p_acl_cb;
     UINT8       page_num, max_page;
@@ -1162,6 +1162,14 @@ void btm_read_remote_ext_features_complete (UINT8 *p)
 
     BTM_TRACE_DEBUG ("btm_read_remote_ext_features_complete");
 
+    if (evt_len < HCI_EXT_FEATURES_SUCCESS_EVT_LEN) {
+        android_errorWriteLog(0x534e4554, "141552859");
+        BTM_TRACE_ERROR(
+            "btm_read_remote_ext_features_complete evt length too short. length=%d",
+            evt_len);
+        return;
+    }
+
     ++p;
     STREAM_TO_UINT16 (handle, p);
     STREAM_TO_UINT8  (page_num, p);
@@ -1180,6 +1188,18 @@ void btm_read_remote_ext_features_complete (UINT8 *p)
         return;
     }
 
+    if (page_num > HCI_EXT_FEATURES_PAGE_MAX) {
+        android_errorWriteLog(0x534e4554, "141552859");
+        BTM_TRACE_ERROR("btm_read_remote_ext_features_complete num_page=%d invalid",
+                        page_num);
+        return;
+    }
+    if (page_num > max_page) {
+        BTM_TRACE_WARNING(
+            "btm_read_remote_ext_features_complete num_page=%d, max_page=%d "
+            "invalid", page_num, max_page);
+    }
+
     p_acl_cb = &btm_cb.acl_db[acl_idx];
 
     /* Copy the received features page */
diff --git a/stack/btm/btm_int.h b/stack/btm/btm_int.h
index c3357c243..b1349ac4d 100644
--- a/stack/btm/btm_int.h
+++ b/stack/btm/btm_int.h
@@ -975,7 +975,7 @@ extern void         btm_acl_encrypt_change (UINT16 handle, UINT8 status, UINT8 e
 extern UINT16       btm_get_acl_disc_reason_code (void);
 extern tBTM_STATUS  btm_remove_acl (BD_ADDR bd_addr, tBT_TRANSPORT transport);
 extern void         btm_read_remote_features_complete (UINT8 *p);
-extern void         btm_read_remote_ext_features_complete (UINT8 *p);
+extern void         btm_read_remote_ext_features_complete (UINT8 *p, UINT8 evt_len);
 extern void         btm_read_remote_ext_features_failed (UINT8 status, UINT16 handle);
 extern void         btm_read_remote_version_complete (UINT8 *p);
 extern void         btm_establish_continue (tACL_CONN *p_acl_cb);
diff --git a/stack/btu/btu_hcif.c b/stack/btu/btu_hcif.c
index ee72841be..7434d130d 100644
--- a/stack/btu/btu_hcif.c
+++ b/stack/btu/btu_hcif.c
@@ -68,7 +68,8 @@ static void btu_hcif_authentication_comp_evt (UINT8 *p);
 static void btu_hcif_rmt_name_request_comp_evt (UINT8 *p, UINT16 evt_len);
 static void btu_hcif_encryption_change_evt (UINT8 *p);
 static void btu_hcif_read_rmt_features_comp_evt (UINT8 *p);
-static void btu_hcif_read_rmt_ext_features_comp_evt (UINT8 *p);
+static void btu_hcif_read_rmt_ext_features_comp_evt (UINT8 *p,
+                                                     UINT8 evt_len);
 static void btu_hcif_read_rmt_version_comp_evt (UINT8 *p);
 static void btu_hcif_qos_setup_comp_evt (UINT8 *p);
 static void btu_hcif_command_complete_evt (BT_HDR *response, void *context);
@@ -189,7 +190,7 @@ void btu_hcif_process_event (UNUSED_ATTR UINT8 controller_id, BT_HDR *p_msg)
             btu_hcif_read_rmt_features_comp_evt (p);
             break;
         case HCI_READ_RMT_EXT_FEATURES_COMP_EVT:
-            btu_hcif_read_rmt_ext_features_comp_evt (p);
+            btu_hcif_read_rmt_ext_features_comp_evt (p, hci_evt_len);
             break;
         case HCI_READ_RMT_VERSION_COMP_EVT:
             btu_hcif_read_rmt_version_comp_evt (p);
@@ -721,7 +722,8 @@ static void btu_hcif_read_rmt_features_comp_evt (UINT8 *p)
 ** Returns          void
 **
 *******************************************************************************/
-static void btu_hcif_read_rmt_ext_features_comp_evt (UINT8 *p)
+static void btu_hcif_read_rmt_ext_features_comp_evt (UINT8 *p,
+                                                     UINT8 evt_len)
 {
     UINT8 *p_cur = p;
     UINT8 status;
@@ -730,7 +732,7 @@ static void btu_hcif_read_rmt_ext_features_comp_evt (UINT8 *p)
     STREAM_TO_UINT8 (status, p_cur);
 
     if (status == HCI_SUCCESS)
-        btm_read_remote_ext_features_complete(p);
+        btm_read_remote_ext_features_complete(p, evt_len);
     else
     {
         STREAM_TO_UINT16 (handle, p_cur);
diff --git a/stack/include/hcidefs.h b/stack/include/hcidefs.h
index 71d5046b8..021e7f41e 100644
--- a/stack/include/hcidefs.h
+++ b/stack/include/hcidefs.h
@@ -1446,6 +1446,8 @@ typedef struct
 
 #define HCI_FEATURE_BYTES_PER_PAGE      8
 
+#define HCI_EXT_FEATURES_SUCCESS_EVT_LEN 13
+
 #define HCI_FEATURES_KNOWN(x) ((x[0] | x[1] | x[2] | x[3] | x[4] | x[5] | x[6] | x[7]) != 0)
 
 /*
-- 
2.17.1

