From f29104c8dcb39eb436f3ded73ba3fedf02ea99b3 Mon Sep 17 00:00:00 2001
From: Pete Bentley <prb@google.com>
Date: Mon, 9 Jul 2018 11:42:50 +0100
Subject: [PATCH] Fix hostname parsing in java.net.URLStreamHandler.

As per https://url.spec.whatwg.org/#host-state, any of the
characters '/', '\', '#' or '?' should be treated as
terminators when parsing the host part of a URL.

Change-Id: I1dc8db7101fdd863b51408b9cfb3ef7a585f1c04
Tested: Ran CtsLibcoreTestCases
Bug: 110955991
(cherry picked from commit 512b127b593c9bdfbd92e2744495d9e17be9b4f3)
---
 luni/src/main/java/java/net/URLStreamHandler.java |  2 +-
 luni/src/test/java/libcore/java/net/URLTest.java  | 20 ++++++++++++++++++++
 2 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/luni/src/main/java/java/net/URLStreamHandler.java b/luni/src/main/java/java/net/URLStreamHandler.java
index d21bb9c..0cbb4ba 100644
--- a/luni/src/main/java/java/net/URLStreamHandler.java
+++ b/luni/src/main/java/java/net/URLStreamHandler.java
@@ -101,7 +101,7 @@ public abstract class URLStreamHandler {
         if (spec.regionMatches(start, "//", 0, 2)) {
             // Parse the authority from the spec.
             int authorityStart = start + 2;
-            fileStart = UrlUtils.findFirstOf(spec, "/?#", authorityStart, end);
+            fileStart = UrlUtils.findFirstOf(spec, "/?#\\", authorityStart, end);
             authority = spec.substring(authorityStart, fileStart);
             int userInfoEnd = UrlUtils.findFirstOf(spec, "@", authorityStart, fileStart);
             int hostStart;
diff --git a/luni/src/test/java/libcore/java/net/URLTest.java b/luni/src/test/java/libcore/java/net/URLTest.java
index 07e651c..1c9ffae 100644
--- a/luni/src/test/java/libcore/java/net/URLTest.java
+++ b/luni/src/test/java/libcore/java/net/URLTest.java
@@ -407,6 +407,26 @@ public final class URLTest extends TestCase {
         assertEquals("http://host/a/c", url.toString()); // RI doesn't canonicalize
     }
 
+    public void testPathContainsBackslash() throws Exception {
+        URL url = new URL("http://host\\path@foo");
+        assertEquals("\\path@foo", url.getPath());
+        assertEquals("host", url.getHost());
+    }
+
+    public void testQueryContainsForwardSlash() throws Exception {
+        URL url = new URL("http://host?query/foo");
+        assertEquals("", url.getPath());
+        assertEquals("host", url.getHost());
+        assertEquals("query/foo", url.getQuery());
+    }
+
+    public void testFragmentContainsForwardSlash() throws Exception {
+        URL url = new URL("http://host#fragment/foo");
+        assertEquals("", url.getPath());
+        assertEquals("host", url.getHost());
+        assertEquals("fragment/foo", url.getRef());
+    }
+
     public void testRelativePathAndFragment() throws Exception {
         URL base = new URL("http://host/file");
         assertEquals("http://host/another#fragment", new URL(base, "another#fragment").toString());
-- 
2.7.4

